<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JSON方法将字符串和数组对象（或数组）之间转换出现的问题]]></title>
    <url>%2F2019%2F09%2F06%2FJSON%E6%96%B9%E6%B3%95%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%EF%BC%88%E6%88%96%E6%95%B0%E7%BB%84%EF%BC%89%E4%B9%8B%E9%97%B4%E8%BD%AC%E6%8D%A2%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[SyntaxError: Unexpected token o in JSON at position 1 at JSON.parse在本地存储中存取数组对象时发生的错误：123456789const comment = &#123;id: Date.now(), user: this.user, content: this.content&#125;;const list = JSON.parse(localStorage.getItem("cm's") || '[]');console.log(list);list.push(comment);localStorage.setItem("cm's",JSON.parse(list));this.user = this.content = '';this.$emit('func') 运行上面代码会报错，如下： 本地存储中的数据时以JSON字符串的形式存储的，我取其中的数据时，需要将其转换为数组的形式（这里用JSON.parse() 方法） 1const list = JSON.parse(localStorage.getItem(&quot;cm&apos;s&quot;) || &apos;[]&apos;); 然后我将自己定义的对象添加进本地存储时，则需要将数组转换为JSON字符串形式存储（这里用JSON.stringify() 方法） 1localStorage.setItem("cm's",JSON.stringify(list)); 知识点 JSON.parse() 方法用于将一个 JSON 字符串转换为对象 JSON.stringify()方法是将一个**JS对象或数组转换为一个 JSON字符串]]></content>
      <categories>
        <category>-前端知识点</category>
      </categories>
      <tags>
        <tag>-前端, -JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue运行项目时遇到 Error Cannot find module 'chalk' ....]]></title>
    <url>%2F2019%2F08%2F29%2F%E3%80%90VueEr%E3%80%91%E8%BF%90%E8%A1%8C%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%81%87%E5%88%B0%20Error%20Cannot%20find%20module%20'chalk'%2F</url>
    <content type="text"><![CDATA[打开一个Vue项目之前，执行 npm run dev 时，报下面的错误：​ Error: Cannot find module ‘chalk’ ….. 方法1.看看是不是你改动过根文件的文件名，是这样的话，记得原来的文件名你可以改回来原来的名字 再 npm run dev 试试。 否则 用方法2。 方法2.简单粗暴的删掉原来的 node_modules 模块 重新安装，命令如下： $ rm -rf node_modules $ npm install 接着 npm run dev 就可以成功了]]></content>
      <categories>
        <category>-前端知识点</category>
      </categories>
      <tags>
        <tag>-前端 -JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[article]]></title>
    <url>%2F2019%2F08%2F19%2Farticle%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[JQuery 基础的语法]]></title>
    <url>%2F2019%2F08%2F17%2FjQuery%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[JQuery的基本使用DOM对象用原生JS获取来的对象就是DOM对象 本质：DOM对象只能用原生 JavaScript 属性和方法 12var myDiv = doucument.querySelector('div');var mySpan = document.querySelector('span'); JQuery对象用JQuery方法获取的对象就是JQuery对象 本质：1.通过$把DOM元素进行了包装 ​ 2.jQuery对象只能用 jQuery 属性和方法 12$('div');$('span'); DOM对象与jQuery对象之间相互转换DOM对象 转换成 jQuery对象： 直接获取得到jQuery对象：$(DOM对象)； 1$('div'); 已经使用原生JS 获取过来的 DOM对象： 1$(myDiv);//DOM对象不需要加‘引号 jQuery对象转换为DOM对象(两种方式)：1$('div')[index];//index是索引号 1$('div')get('index');//index是索引号 jQuery常用的APIjQuery 选择器原生JS获取元素方式很多，很杂，而且兼容性情况不一致，因此jQuery给我们做了封装，使获取元素统一标准 1$("选择器")；//里面选择器直接写CSS选择器即可，但是要加引号 jQuery 层级选择器 名称 用法 描述 ID选择器 $(“#id”); 获取指定ID的元素 全选选择器 $(“*”); 匹配所有元素 类选择器 $(“.class”); 获取同一类class的元素 标签选择器 $(“div”); 获取同一类标签的所有元素 并集选择器 $(“div p li”); 选取多个元素 交集选择器 $(“li.current”); 交集元素 子代选择器 $(“ul &gt; li”); 使用&gt;号，获取亲儿子层级的元素；注意，并不会获取孙子层级的元素 后代选择器 $(“ul li”); 使用空格连接，代表后代选择器，获取ul下的所有li元素，包括孙子等 隐式迭代（重要）隐式迭代：遍历内部DOM元素（伪数组形式存储）的过程简单理解：给匹配到的所有元素进行循环遍历，执行相应的方法，而不用我们再写for循环再进行操作，大大简化了我们的代码 案例：给四个div设置背景颜色为粉色 （jQuery对象不能使用style ） 1$("div").css("background","pink"); jQuery 筛选选择器 名称 语法 描述 :first $(“li:first”) 获取li里面的第一个元素 :last $(“li:last”) 获取li里面最后一个li元素 :eq(index) $(“li:eq(2)”) 获取到的li元素中，选择索引号为2的元素(索引号index从0开始) :odd $(“li:odd”) 获取到的li元素中，选择索引号为奇数的元素 :even $(“li:even”) 获取到的li元素中，选择索引号为偶数的元素 jQuery 筛选方法（重点） 语法 用法 说明 parent() $(“li”).parent(“”); 选择父级(亲爸爸) children(selector) $(“ul”).children(“li”); 相当于$(“ul &gt; li”)，选择最近一级(亲儿子) find(selector) $(“ul”).find(“li”); 相当于$(“ul li”)，后代选择器 Siblings(selector) $(“.first”).sibilings(“li”); 查找兄弟节点，不包括自己本身 nextAll([expr]) $(“.first”).nextAll(); 查找当前元素之后所有的同辈元素 prevtAll([expr]) $(“.last”).prevAll(); 查找当前元素之前所有的同辈元素 haClass(class) $(‘div’).hasClass(“protected”); 检查当前的元素是否含有某个特定的类，如果有，则返回true eq(index) $(“li”).eq(2); 相当于$(“li:eq(2)”)，index从0开始 案例：新浪下拉菜单 $(this)： jQuery里的当前元素，this不用加引号 1234567891011121314&lt;script&gt; $(function()&#123; //我引入的jQuery文件 没有mouseover 和 mouseout，所以我直接引入mouseenter $(".nav&gt;li").mouseenter(function()&#123; //$(this) 是jQuery 当前元素 this 不要加引号 //show() 显示元素 $(this).children("ul").show(); &#125;) $(".nav&gt;li").mouseleave(function ()&#123; //鼠标离开 hide() 隐藏元素 $(this).children("ul").hide(); &#125;) &#125;)&lt;/script&gt; jQuery排他思想当前元素设置样式，其余兄弟元素清除样式 jQuery的链式编程链式编程是为了节省代码量，看起来更优雅 12$(this).css('color','red').sibilings().css('color','');//让this 当前元素的css文字颜色 改为红色，兄弟元素文字颜色为空 使用链式编程一定注意是哪个对象执行样式 jQuery 样式操作操作CSS方法jQuery可以使用css方法来修改简单元素样式，也可以操作类，修改多个样式。 参数只写 属性名，则返回属性值 1$(this).css('color');//返回的是color的属性值 参数是 属性名，属性值 (逗号分隔) 是设置一组样式，属性必须加引号，值如果是数字可以不用跟单位和引号 1$(this).css("color","red") 参数可以是对象形式，方便设置多组样式，属性名和属性值用冒号隔开，属性可以不用加引号 1234567$(this).css(&#123; color:"white", width:400,//数字可以不加引号，px可以不加单位 height:400, fontSize:20px, backgroundColor:'pink'//复合属性则需采取驼峰命名法&#125;) 操作类样式方法作用等同于以前的 classList， 可以操作类样式，注意操作类里面的参数不要加点 添加类 1$("div").addClass("current"); 移除类 1$("div").removeClass("current")； 切换类：两种效果切换 1$("div").toggleClass("current") 案例：tab栏切换分析 点击上部的 li，当前li添加 current 类，其余兄弟移除类 点击的同时，得到当前的 li 的索引号 让下部里面相应索引号的 item 显示，其余的 item 隐藏 JS代码 123456789&lt;script&gt; $(function () &#123; $(".tab_con li").click(function () &#123; $(this).addClass("current").siblings("li").removeClass("current"); var index = $(this).index(); $(".item").eq(index).show().siblings(".item").hide(); &#125;) &#125;)&lt;/script&gt; 类操作与className的区别：原生JS中 className 会覆盖元素原先里面的类名 jQuery里面类操作只是对指定类进行操作，不影响原先的类名 jQuery 效果jQuery给我们封装了很多动画效果，最为常见的如下： 显示 与 隐藏效果 显示元素 效果语法规范 1show([speed,[easing][fn]]) ​ 1.参数都可以省略，无动画直接显示 ​ 2. speed：三种预定速度之一的字符串（”slow”,”normal”,”fast”） 或表示动画时长的毫秒数值（如：1000） ​ 3. easing ：（Optional）用来指定切换效果，默认是”swing” （快—慢—快），可用参数”linear”（匀速） ​ 4. fn：回调函数，在动画完成时执行的函数，每个元素执行一次 隐藏元素 效果语法规范 1hide([speed,[easing],[fn]]) ​ 1.参数都可以省略，无动画直接显示 ​ 2. speed：三种预定速度之一的字符串（”slow”,”normal”,”fast”） 或表示动画时长的毫秒数值（如：1000） ​ 3. easing ：（Optional）用来指定切换效果，默认是”swing” （快—慢—快），可用参数”linear”（匀速） 14. fn：回调函数，在动画完成时执行的函数，每个元素执行一次 切换元素 效果语法规范 1toggle([speed,[easing],[fn]]) ​ 1.参数都可以省略，无动画直接显示 ​ 2. speed：三种预定速度之一的字符串（”slow”,”normal”,”fast”） 或表示动画时长的毫秒数值（如：1000） ​ 3. easing ：（Optional）用来指定切换效果，默认是”swing” （快—慢—快），可用参数”linear”（匀速） fn：回调函数，在动画完成时执行的函数，每个元素执行一次 滑动效果 下拉滑动 1slideDown([speed,[easing],[fn]]) ​ 1.参数都可以省略，无动画直接显示 ​ 2. speed：三种预定速度之一的字符串（”slow”,”normal”,”fast”） 或表示动画时长的毫秒数值（如：1000） ​ 3. easing ：（Optional）用来指定切换效果，默认是”swing” （快—慢—快），可用参数”linear”（匀速） fn：回调函数，在动画完成时执行的函数，每个元素执行一次 上拉滑动 1slideUp([speed,[easing],[fn]]) ​ 1.参数都可以省略，无动画直接显示 ​ 2. speed：三种预定速度之一的字符串（”slow”,”normal”,”fast”） 或表示动画时长的毫秒数值（如：1000） ​ 3. easing ：（Optional）用来指定切换效果，默认是”swing” （快—慢—快），可用参数”linear”（匀速） fn：回调函数，在动画完成时执行的函数，每个元素执行一次 切换滑动 1slideToggle([speed,[easing],[fn]]) ​ 1.参数都可以省略，无动画直接显示 ​ 2. speed：三种预定速度之一的字符串（”slow”,”normal”,”fast”） 或表示动画时长的毫秒数值（如：1000） ​ 3. easing ：（Optional）用来指定切换效果，默认是”swing” （快—慢—快），可用参数”linear”（匀速） fn：回调函数，在动画完成时执行的函数，每个元素执行一次 事件切换 1hover([over],out) 11. over : 鼠标移到元素上要触发的函数(相当于mouseenter) out : 鼠标移出元素时要触发的函数(相当于mouseleave) 如果只写一个函数，意味着 鼠标经过 和 鼠标离开都会触发这个函数（与slideToggle()搭配十分简单） 动画队列 及其 停止排队方法 动画 或效果队列 动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行。 停止排队 1stop() ​ stop()方法用于停止动画或效果 注意：stop()写到动画 或效果的前面，相当于停止结束上一次的动画 淡入淡出效果 淡入效果 1fadeIn([speed,[easing],[fn]]) ​ 1.参数都可以省略 ​ 2. speed：三种预定速度之一的字符串（”slow”,”normal”,”fast”） 或表示动画时长的毫秒数值（如：1000） ​ 3. easing ：（Optional）用来指定切换效果，默认是”swing” （快—慢—快），可用参数”linear”（匀速） fn：回调函数，在动画完成时执行的函数，每个元素执行一次 淡出效果 1fadeOut([speed,[easing],[fn]]) ​ 1.参数都可以省略 ​ 2. speed：三种预定速度之一的字符串（”slow”,”normal”,”fast”） 或表示动画时长的毫秒数值（如：1000） ​ 3. easing ：（Optional）用来指定切换效果，默认是”swing” （快—慢—快），可用参数”linear”（匀速） fn：回调函数，在动画完成时执行的函数，每个元素执行一次 淡入淡出切换效果 1fadeToggle([speed,[easing],[fn]]) ​ 1.参数都可以省略 ​ 2. speed：三种预定速度之一的字符串（”slow”,”normal”,”fast”） 或表示动画时长的毫秒数值（如：1000） ​ 3. easing ：（Optional）用来指定切换效果，默认是”swing” （快—慢—快），可用参数”linear”（匀速） fn：回调函数，在动画完成时执行的函数，每个元素执行一次 修改透明度:渐进方式调整到指定的不透明度 1fadeToggle([speed,opacity，[easing],[fn]]) 效果参数： 11. Opacity透明度必须写，取值 0～1之间 speed：三种预定速度之一的字符串（”slow”,”normal”,”fast”） 或表示动画时长的毫秒数值（如：1000） easing ：（Optional）用来指定切换效果，默认是”swing” （快—慢—快），可用参数”linear”（匀速） fn：回调函数，在动画完成时执行的函数，每个元素执行一次 自定义动画 animate 语法 1animate(params,[speed],[easing],[fn]) 参数： params : 想要更改的样式属性，以对象形式传递，（用{}来书写）必须写。属性名可以不用带引号，如果是复合属性则需要采用驼峰命名法（如boderLeft）。其余参数都可以省略。 speed：三种预定速度之一的字符串（”slow”,”normal”,”fast”） 或表示动画时长的毫秒数值（如：1000） easing ：（Optional）用来指定切换效果，默认是”swing” （快—慢—快），可用参数”linear”（匀速） fn：回调函数，在动画完成时执行的函数，每个元素执行一次 案例：王者荣耀手风琴jQuery 属性操作设置 或 获取元素固有属性值 prop()所谓元素固有属性就是元素本身自带的属性，比如元素里面的href，比如元素里面的 type属性 获取属性 语法 1prop("属性名")； 设置属性值 语法 1prop("属性名","属性值") ​ 设置 或 获取元素自定义属性值 attr()用户自己给元素添加的属性，我们称为自定义属性，比如给 div 添加 index = “1” 获取属性 语法 1attr("属性名")； 设置属性值 语法 1attr("属性名","属性值") 该方法也可以获取H5自定义属性 数据缓存 data()data() 方法可以在指定的元素是存取数据，并不会修改 DOM 元素结构。一旦页面刷新，之前存放的数据都将被移除。 附加数据 语法 1data("name","value"); //向备选元素附加数据 获取数据 语法 1data("name"); //向备选元素获取数据 同时，还可以读取HTML5自定义属性 data—index，得到的是数字型 案例：购物车模块（品优购） jQuery 文本属性值主要针对元素的内容还有表单的值操作： 获取设置 普通元素内容 html() （相当于原生 innerHTML ） 1html() //获取元素的内容 1html("内容") //设置元素的内容 获取设置 普通元素文本内容 text() （相当于原生innerText） 1text() //获取元素的文本内容 1text("文本内容") //设置元素的文本内容 获取设置 表单值 val()（相当于原生value） 1val() //获取表单的内容 1val("内容") //修改表单的值 案例：购物车小计模块 jQuery 元素操作主要是遍历、创建、添加、删除元素操作： 遍历元素jQuery隐式迭代是对同一类元素做了相同操作。如果针对于同一类元素做不同操作，就需要用到遍历 语法1: 1$("div").each( function(index,demEle )&#123; xxx; &#125;) each() 方法遍历匹配的每一个元素，主要用DOM处理。each每一个 里面的回掉函数有2个参数：index是每个元素的索引号；demEle 是每个DOM元素对象，不是 jQuery 对象 所以要想使用 jQuery 方法，需要给这个dom元素转换为 jQuery 对象$(domEle) 语法2 1$.each( object, function(index, element)&#123; xxx; &#125;) $.each() 方法可用于遍历任何对象。主要用于数据处理，比如数组，对象 里面的函数有2个参数：index是每个元素的索引号；element 遍历内容 jQuery 尺寸、位置操作]]></content>
      <categories>
        <category>-前端知识点</category>
      </categories>
      <tags>
        <tag>-前端, -JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F08%2F14%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
